import streamlit as st
import mysql.connector 
import datetime
import time
import pandas as pd
import pyotp
import qrcode
import os
from mysql.connector import Error
from list import districts_bangkok, subdistricts_by_district


st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit&display=swap');

    html, body, div, p, label, input, textarea, button, h1, h2, h3, h4, h5, h6, span {
        font-family: 'Kanit', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)


# Function to connect to the database
def connect_db():
    try:
        conn = mysql.connector.connect(
            host="mysql",
            user="root",
            password="1234",  
            database="test324"  
        )
        if conn.is_connected():
            print("Connected to MySQL database")
        return conn
    except Error as e:
        print(f"Error while connecting to MySQL: {e}")
        return None


# Function to insert data
def insert_data_to_db(data):
    try:
        conn = connect_db()
        cursor = conn.cursor()

        # prepare SQL INSERT
        placeholders = ', '.join(['%s'] * len(data))
        columns = ', '.join(data.keys())
        sql = f"INSERT INTO reports ({columns}) VALUES ({placeholders})"
        values = list(data.values())

        cursor.execute(sql, values)
        conn.commit()

        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except mysql.connector.Error as err:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {err}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()


# Function to check user credentials
def check_user_credentials(email, password, otp_code):
    conn = connect_db()
    if conn is None:
        return False, None

    try:
        cursor = conn.cursor(dictionary=True)
        query = "SELECT password, otp_secret, role FROM users WHERE email = %s"
        cursor.execute(query, (email,))
        result = cursor.fetchone()

        if result is None:
            print("No user found.")
            return False, None
        
        if result['password'] != password:
            print(f"Password mismatch. Stored: {result['password']} Input: {password}")
            return False, None

        # OTP check
        totp = pyotp.TOTP(result['otp_secret'])
        otp_generated = totp.now()
        print(f"Generated OTP: {otp_generated} - Input OTP: {otp_code}")

        if not totp.verify(otp_code):
            print("OTP verification failed.")
            return False, None

        return True, result['role']

    except Error as e:
        print(f"Error while checking credentials: {e}")
        return False, None
    finally:
        cursor.close()
        conn.close()


# Login page
def login():
    st.title("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

    if "logging_in" not in st.session_state:
        st.session_state.logging_in = False

    # Form section
    with st.form("login_form"):
        
        email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", disabled=st.session_state.logging_in)
        password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", disabled=st.session_state.logging_in)
        otp_code = st.text_input("‡∏£‡∏´‡∏±‡∏™ OTP", type="password", disabled=st.session_state.logging_in)

        if not st.session_state.logging_in:
            submit = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        else:
            st.markdown("")
            submit = False

    # Handle login
    if submit:
        if '@hvbma.or.th' not in email:
            st.error("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        elif not (email and password and otp_code):
            st.error("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™ OTP")
        else:
            ok, role = check_user_credentials(email, password, otp_code)
            if not ok:
                st.error("‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            else:
                # cant duplicate login
                local_part = email.split('@')[0]
                st.session_state.user_email = email 
                st.session_state.username = local_part
                st.session_state.role = role
                st.session_state.logging_in = True
                st.rerun()

    # login success
    elif st.session_state.logging_in:
        st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ...")
        time.sleep(1)
        st.session_state.logged_in = True
        st.session_state.page = "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"
        st.session_state.logging_in = False
        st.rerun()


#Create Account page
def create_account_page():
    st.title("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")

    new_email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
    new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    new_role = st.selectbox("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó", ["user", "admin", "dev"])

    if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"):
        # OTP Secret
        totp = pyotp.TOTP(pyotp.random_base32())
        otp_secret = totp.secret

        # add to db
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO users (email, password, role, otp_secret)
            VALUES (%s, %s, %s, %s)
        """, (new_email, new_password, new_role, otp_secret))
        conn.commit()

        # create QR Code
        otp_uri = totp.provisioning_uri(name=new_email, issuer_name="DSI324 App")
        img = qrcode.make(otp_uri)
        img_path = f"qr_img/qr_{new_email.replace('@', '_at_')}.png"
        os.makedirs("qr_img", exist_ok=True)
        img.save(img_path)

        st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        st.markdown("üîé‡πÅ‡∏™‡∏Å‡∏ô QR Code ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ Google Authenticatorüîé")
        st.image(img_path, width=200)


# Data entry page
def data_entry_page():
    st.title("‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")

    col1, col2 = st.columns(2)
    with col1:
        volunteer_id = st.text_input("‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£")
        if volunteer_id and not volunteer_id.isdigit():
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£")
        first_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠")
        phone_number = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå")
        
    with col2:
        prefix = st.selectbox("‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤", ["‡∏ô‡∏≤‡∏¢", "‡∏ô‡∏≤‡∏á", "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß"])
        last_name = st.text_input("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
        community = st.text_input("‡∏ä‡∏∏‡∏°‡∏ä‡∏ô")

    col3, col4 = st.columns(2)
    with col3:
        birth_date = st.date_input(
            "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î",
            value=datetime.date(2000, 1, 1),               
            min_value=datetime.date(1900, 1, 1),          
            max_value=datetime.date.today()                
        )
    with col4:
        gender = st.radio("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])

    district_list = list(subdistricts_by_district.keys())
    district = st.selectbox("‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", district_list)

    selected_district = st.session_state.get("district")
    if district:
         sub_district_options = subdistricts_by_district.get(district, [])
    else:
        sub_district_options = []
    sub_district = st.selectbox("‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•", sub_district_options, key="sub_district")
    province = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", ["‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"])

    st.subheader("‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô")
    operation_month = st.selectbox("‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ])
    operation_year = st.number_input("‡∏õ‡∏µ ‡∏û.‡∏®.", min_value=2500, max_value=2600, value=2568)

    st.subheader("1. ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")

    col_q1_1, col_res1_1 = st.columns(2)
    with col_q1_1:
        st.markdown("1.1 ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î/‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà/‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÅ‡∏Å‡πà‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•, ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏¢, Line, Tiktok ‡∏Ø‡∏•‡∏Ø)")
    with col_res1_1:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q1_prevention1_times")
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q1_prevention1_people")

    col_q1_2, col_res1_2 = st.columns(2)
    with col_q1_2:
        st.markdown("1.2 ‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏ì‡∏£‡∏á‡∏Ñ‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î/‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà/‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå")
    with col_res1_2:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q1_prevention2_times")

    col_q1_3, col_res1_3 = st.columns(2)
    with col_q1_3:
        st.markdown("1.3 ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î(‡∏Å‡∏±‡∏ç‡∏ä‡∏≤,‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°,‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà,‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤,‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå)‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡∏≤‡∏ß‡∏ä‡∏ô ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô/‡∏£‡∏≠‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
    with col_res1_3:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q1_prevention3_times")

    col_q1_4, col_res1_4 = st.columns(2)
    with col_q1_4:
        st.markdown("1.4 ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ/‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏™‡∏°‡∏≠‡∏á (EF) ‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏õ‡∏ê‡∏°‡∏ß‡∏±‡∏¢")
    with col_res1_4:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q1_prevention4_times")
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q1_prevention4_people")

    col_q1_5, col_res1_5 = st.columns(2)
    with col_q1_5:
        st.markdown("1.5 ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÅ‡∏Å‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
    with col_res1_5:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q1_prevention5_times")

    st.subheader("2. ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏û/‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô")

    col_q2_1, col_res2_1 = st.columns(2)
    with col_q2_1:
        st.markdown("2.1 ‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á/‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥/‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ,‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏û‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤")
    with col_res2_1:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q2_treatment1_times")
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q2_treatment1_people")

    col_q2_2, col_res2_2 = st.columns(2)
    with col_q2_2:
        st.markdown("2.2 ‡∏£‡πà‡∏ß‡∏°‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ,‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏û,‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î/‡∏£‡πà‡∏ß‡∏°‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
    with col_res2_2:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q2_treatment2_times")

    col_q2_3, col_res2_3 = st.columns(2)
    with col_q2_3:
        st.markdown("2.3 ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤")
    with col_res2_3:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q2_treatment3_times")
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q2_treatment3_people")

    col_q2_4, col_res2_4 = st.columns(2)
    with col_q2_4:
        st.markdown("2.4 ‡∏£‡πà‡∏ß‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°/‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏¥‡∏ï‡πÄ‡∏ß‡∏ä‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
    with col_res2_4:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q2_treatment4_times") 
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q2_treatment4_people") 

    col_q2_5, col_res2_5 = st.columns(2)
    with col_q2_5:
        st.markdown("2.5 ‡∏£‡πà‡∏ß‡∏°‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡πÄ‡∏´‡∏ï‡∏∏‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ñ‡∏•‡∏∏‡πâ‡∏°‡∏Ñ‡∏•‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô")
    with col_res2_5:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q2_treatment5_times") 

    st.subheader("3. ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏û, ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô")

    col_q3_1, col_res3_1 = st.columns(2)
    with col_q3_1:
        st.markdown("3. ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏û, ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô")
    with col_res3_1:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q3_assistance_times") 
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q3_assistance_people") 

    st.subheader("4.‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏Ñ‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")

    col_q4_1, col_res4_1 = st.columns(2)
    with col_q4_1:
        st.markdown("4.1 ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ß‡∏ó‡∏µ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Ñ‡∏°/‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°/‡∏≠‡∏ö‡∏£‡∏°/‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡∏π‡∏á‡∏≤‡∏ô ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
    with col_res4_1:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q4_engaging1_times") 

    col_q4_2, col_res4_2 = st.columns(2)
    with col_q4_2:
        st.markdown("4.2 ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏≤‡∏ô‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
    with col_res4_2:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q4_engaging2_times")

    st.subheader("5. ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤/‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏Å‡πà‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")

    col_q5_1, col_res5_1 = st.columns(2)
    with col_q5_1:
        st.markdown("5. ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤/‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏Å‡πà‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î")
    with col_res5_1:
        st.number_input("‡∏Ñ‡∏£‡∏±‡πâ‡∏á", min_value=0, key="q5_consult_times")
        st.number_input("‡∏£‡∏≤‡∏¢ (‡∏Ñ‡∏ô)", min_value=0, key="q5_consult_people")

    st.subheader("6. ‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏≤‡πÄ‡∏™‡∏û‡∏ï‡∏¥‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô")
    suggestions = st.text_area("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏", key="q6_others")

    st.subheader("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")
    suggestions_note = st.text_area("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏", key="notes")

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£"):
        data = {
            "volunteer_id": volunteer_id,
            "prefix": prefix,
            "first_name": first_name,
            "last_name": last_name,
            "phone_number": phone_number,
            "community": community,
            "birth_date": birth_date.isoformat() if birth_date else None,
            "gender": gender,
            "sub_district": st.session_state.sub_district,
            "district": district,
            "province": province,
            "operation_month": operation_month,
            "operation_year": operation_year,
            "q1_prevention1_times": st.session_state.q1_prevention1_times,
            "q1_prevention1_people": st.session_state.q1_prevention1_people,
            "q1_prevention2_times": st.session_state.q1_prevention2_times,
            "q1_prevention3_times": st.session_state.q1_prevention3_times,
            "q1_prevention4_times": st.session_state.q1_prevention4_times,
            "q1_prevention4_people": st.session_state.q1_prevention4_people,
            "q1_prevention5_times": st.session_state.q1_prevention5_times,
            "q2_treatment1_times": st.session_state.q2_treatment1_times,
            "q2_treatment1_people": st.session_state.q2_treatment1_people,
            "q2_treatment2_times": st.session_state.q2_treatment2_times,
            "q2_treatment3_times": st.session_state.q2_treatment3_times,
            "q2_treatment3_people": st.session_state.q2_treatment3_people,
            "q2_treatment4_times": st.session_state.q2_treatment4_times, 
            "q2_treatment4_people": st.session_state.q2_treatment4_people, 
            "q2_treatment5_times": st.session_state.q2_treatment5_times,
            "q3_assistance_times": st.session_state.q3_assistance_times, 
            "q3_assistance_people": st.session_state.q3_assistance_people, 
            "q4_engaging1_times": st.session_state.q4_engaging1_times, 
            "q4_engaging2_times": st.session_state.q4_engaging2_times, 
            "q5_consult_times": st.session_state.q5_consult_times, 
            "q5_consult_people": st.session_state.q5_consult_people, 
            "q6_others": suggestions,
            "notes": suggestions_note
        }
        st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å:")
        st.write(data)

        insert_data_to_db(data)


# Function Monitor Data
def view_reports_page():

    st.title("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£")
    conn = connect_db()
    if conn:
        df = pd.read_sql("SELECT * FROM reports", conn)

        df.set_index('id', inplace=True)
        conn.close()
        st.dataframe(df.style.hide(axis="index"))

    else:
        st.error("Can't connect to Database.")


# Main function to control navigation
def main():
    # Check if user is logged in
    if 'logged_in' not in st.session_state or not st.session_state.logged_in:
        login()  # Show login page if not logged in
    else:
        # Set default page if not set
        if 'page' not in st.session_state:
            st.session_state.page = "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"

        role = st.session_state.get("role", "")  # role from login

        # Prepare page options based on role
        page_options = ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"]
        if role in ["admin", "dev"]:
            page_options.extend(["‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"])
        elif role == "user":
            page_options.append("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
        if role == "dev":
            page_options.append("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")

        # Sidebar selection
        page = st.sidebar.selectbox("‡πÄ‡∏°‡∏ô‡∏π", page_options)

        # Page routing
        if page == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
            st.session_state.page = "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"
            st.title(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {st.session_state.username}")
            st.write("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            st.write("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢")

            # confirm logout
            if st.session_state.get("confirm_logout", False):
                st.warning("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                
                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button("‚úÖ ‡πÉ‡∏ä‡πà", key="confirm_yes", use_container_width=True):
                        st.session_state.clear()
                        st.rerun()
                with col2:
                    if st.button("‚ùå ‡πÑ‡∏°‡πà", key="confirm_no", use_container_width=True):
                        st.session_state.confirm_logout = False
                        st.rerun()
            else:
                if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", key="logout_btn"):
                    st.session_state.confirm_logout = True
                    st.rerun()

        elif page == "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
            if role in ["admin", "dev"]:
                st.session_state.page = "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                data_entry_page()

        elif page == "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
            if role in ["admin", "dev", "user"]:
                st.session_state.page = "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"
                view_reports_page()

        elif page == "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ":
            if role == "dev":
                st.session_state.page = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
                create_account_page()
                

if __name__ == "__main__":
    main()